signature mmFoundationTheory =
sig
  type thm = Thm.thm

  (*  Definitions  *)
    val extends_def : thm
    val mmForm_TY_DEF : thm
    val mmForm_case_def : thm
    val mmForm_size_def : thm
    val mmUpdate_def : thm
    val mmfn_def : thm
    val satFun_def : thm

  (*  Theorems  *)
    val IN_CLAUSES : thm
    val IN_UNION_INTER_CLAUSES : thm
    val MONOTONE_INTER : thm
    val MONOTONE_UNION : thm
    val datatype_mmForm : thm
    val mmForm_11 : thm
    val mmForm_Axiom : thm
    val mmForm_case_cong : thm
    val mmForm_distinct : thm
    val mmForm_induction : thm
    val mmForm_nchotomy : thm
    val mmUpdate_MONOTONIC : thm
    val mmfn_CLAUSES : thm
    val mmfn_MONOTONIC : thm
    val mmfn_MONOTONIC_Box : thm
    val mmfn_MONOTONIC_Dia : thm
    val mmfn_MONOTONIC_andmm : thm
    val mmfn_MONOTONIC_mu : thm
    val mmfn_MONOTONIC_nu : thm
    val mmfn_MONOTONIC_ormm : thm
    val mmfn_MONOTONIC_propvar : thm
    val mmfn_tt_ff_CLAUSES : thm
    val mmsat_IN_CLAUSES : thm
    val mmsat_def : thm
    val mmsat_ind : thm
    val mmsat_mu_lfp : thm
    val mmsat_nu_gfp : thm
    val satFun_MONOTONIC : thm
    val satFun_gfp_thm : thm
    val satFun_lfp_thm : thm

  val mmFoundation_grammars : type_grammar.grammar * term_grammar.grammar
(*
   [fixedPoint] Parent theory of "mmFoundation"

   [indexedLists] Parent theory of "mmFoundation"

   [patternMatches] Parent theory of "mmFoundation"

   [extends_def]  Definition

      |- ‚àÄV V'. extends V V' ‚áî ‚àÄZ. V Z ‚äÜ V' Z

   [mmForm_TY_DEF]  Definition

      |- ‚àÉrep.
           TYPE_DEFINITION
             (Œªa0'.
                ‚àÄ'mmForm' .
                  (‚àÄa0'.
                     (a0' =
                      ind_type$CONSTR 0 (ARB,ARB) (Œªn. ind_type$BOTTOM)) ‚à®
                     (a0' =
                      ind_type$CONSTR (SUC 0) (ARB,ARB)
                        (Œªn. ind_type$BOTTOM)) ‚à®
                     (‚àÉa.
                        a0' =
                        (Œªa.
                           ind_type$CONSTR (SUC (SUC 0)) (a,ARB)
                             (Œªn. ind_type$BOTTOM)) a) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR (SUC (SUC (SUC 0))) (ARB,ARB)
                              (ind_type$FCONS a0
                                 (ind_type$FCONS a1
                                    (Œªn. ind_type$BOTTOM)))) a0 a1) ‚àß
                        'mmForm' a0 ‚àß 'mmForm' a1) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR (SUC (SUC (SUC (SUC 0))))
                              (ARB,ARB)
                              (ind_type$FCONS a0
                                 (ind_type$FCONS a1
                                    (Œªn. ind_type$BOTTOM)))) a0 a1) ‚àß
                        'mmForm' a0 ‚àß 'mmForm' a1) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR (SUC (SUC (SUC (SUC (SUC 0)))))
                              (ARB,a0)
                              (ind_type$FCONS a1 (Œªn. ind_type$BOTTOM))) a0
                           a1) ‚àß 'mmForm' a1) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR
                              (SUC (SUC (SUC (SUC (SUC (SUC 0))))))
                              (ARB,a0)
                              (ind_type$FCONS a1 (Œªn. ind_type$BOTTOM))) a0
                           a1) ‚àß 'mmForm' a1) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR
                              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))
                              (a0,ARB)
                              (ind_type$FCONS a1 (Œªn. ind_type$BOTTOM))) a0
                           a1) ‚àß 'mmForm' a1) ‚à®
                     (‚àÉa0 a1.
                        (a0' =
                         (Œªa0 a1.
                            ind_type$CONSTR
                              (SUC
                                 (SUC
                                    (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))
                              (a0,ARB)
                              (ind_type$FCONS a1 (Œªn. ind_type$BOTTOM))) a0
                           a1) ‚àß 'mmForm' a1) ‚áí
                     'mmForm' a0') ‚áí
                  'mmForm' a0') rep

   [mmForm_case_def]  Definition

      |- (‚àÄv v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE tt v v1 f f1 f2 f3 f4 f5 f6 = v) ‚àß
         (‚àÄv v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE ff v v1 f f1 f2 f3 f4 f5 f6 = v1) ‚àß
         (‚àÄa v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (propmm a) v v1 f f1 f2 f3 f4 f5 f6 = f a) ‚àß
         (‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (a0 andmm a1) v v1 f f1 f2 f3 f4 f5 f6 =
            f1 a0 a1) ‚àß
         (‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (a0 ormm a1) v v1 f f1 f2 f3 f4 f5 f6 = f2 a0 a1) ‚àß
         (‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (Box a0 a1) v v1 f f1 f2 f3 f4 f5 f6 = f3 a0 a1) ‚àß
         (‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (Dia a0 a1) v v1 f f1 f2 f3 f4 f5 f6 = f4 a0 a1) ‚àß
         (‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
            mmForm_CASE (nu a0 a1) v v1 f f1 f2 f3 f4 f5 f6 = f5 a0 a1) ‚àß
         ‚àÄa0 a1 v v1 f f1 f2 f3 f4 f5 f6.
           mmForm_CASE (mu a0 a1) v v1 f f1 f2 f3 f4 f5 f6 = f6 a0 a1

   [mmForm_size_def]  Definition

      |- (‚àÄf f1. mmForm_size f f1 tt = 0) ‚àß
         (‚àÄf f1. mmForm_size f f1 ff = 0) ‚àß
         (‚àÄf f1 a. mmForm_size f f1 (propmm a) = 1 + f1 a) ‚àß
         (‚àÄf f1 a0 a1.
            mmForm_size f f1 (a0 andmm a1) =
            1 + (mmForm_size f f1 a0 + mmForm_size f f1 a1)) ‚àß
         (‚àÄf f1 a0 a1.
            mmForm_size f f1 (a0 ormm a1) =
            1 + (mmForm_size f f1 a0 + mmForm_size f f1 a1)) ‚àß
         (‚àÄf f1 a0 a1.
            mmForm_size f f1 (Box a0 a1) = 1 + mmForm_size f f1 a1) ‚àß
         (‚àÄf f1 a0 a1.
            mmForm_size f f1 (Dia a0 a1) = 1 + mmForm_size f f1 a1) ‚àß
         (‚àÄf f1 a0 a1.
            mmForm_size f f1 (nu a0 a1) =
            1 + (f1 a0 + mmForm_size f f1 a1)) ‚àß
         ‚àÄf f1 a0 a1.
           mmForm_size f f1 (mu a0 a1) = 1 + (f1 a0 + mmForm_size f f1 a1)

   [mmUpdate_def]  Definition

      |- ‚àÄZ V E Y. mmUpdate Z V E Y = if Y = Z then E else V Y

   [mmfn_def]  Definition

      |- ‚àÄTrans f E V. mmfn Trans f E V = {s | s ‚àà E ‚àß (s,Trans,V) mmsat f}

   [satFun_def]  Definition

      |- ‚àÄTrans Z V form E.
           satFun Trans Z V form E =
           mmfn Trans form ùïå(:'configuration) (mmUpdate Z V E)

   [IN_CLAUSES]  Theorem

      |- ({s | s ‚àà (Œªx. P x ‚à® Q x)} =
          {s | s ‚àà (Œªx. P x) ‚à® s ‚àà (Œªx. Q x)}) ‚àß
         ({s | s ‚àà (Œªx. P x ‚àß Q x)} = {s | s ‚àà (Œªx. P x) ‚àß s ‚àà (Œªx. Q x)})

   [IN_UNION_INTER_CLAUSES]  Theorem

      |- ({s | s ‚àà (Œªx. P x ‚àß Q x)} = (Œªx. P x) ‚à© (Œªx. Q x)) ‚àß
         ({s | s ‚àà (Œªx. P x ‚à® Q x)} = (Œªx. P x) ‚à™ (Œªx. Q x))

   [MONOTONE_INTER]  Theorem

      |- A ‚äÜ A' ‚áí B ‚äÜ B' ‚áí A ‚à© B ‚äÜ A' ‚à© B'

   [MONOTONE_UNION]  Theorem

      |- A ‚äÜ A' ‚áí B ‚äÜ B' ‚áí A ‚à™ B ‚äÜ A' ‚à™ B'

   [datatype_mmForm]  Theorem

      |- DATATYPE (mmForm tt ff propmm $andmm $ormm Box Dia nu mu)

   [mmForm_11]  Theorem

      |- (‚àÄa a'. (propmm a = propmm a') ‚áî (a = a')) ‚àß
         (‚àÄa0 a1 a0' a1'.
            (a0 andmm a1 = a0' andmm a1') ‚áî (a0 = a0') ‚àß (a1 = a1')) ‚àß
         (‚àÄa0 a1 a0' a1'.
            (a0 ormm a1 = a0' ormm a1') ‚áî (a0 = a0') ‚àß (a1 = a1')) ‚àß
         (‚àÄa0 a1 a0' a1'.
            (Box a0 a1 = Box a0' a1') ‚áî (a0 = a0') ‚àß (a1 = a1')) ‚àß
         (‚àÄa0 a1 a0' a1'.
            (Dia a0 a1 = Dia a0' a1') ‚áî (a0 = a0') ‚àß (a1 = a1')) ‚àß
         (‚àÄa0 a1 a0' a1'.
            (nu a0 a1 = nu a0' a1') ‚áî (a0 = a0') ‚àß (a1 = a1')) ‚àß
         ‚àÄa0 a1 a0' a1'. (mu a0 a1 = mu a0' a1') ‚áî (a0 = a0') ‚àß (a1 = a1')

   [mmForm_Axiom]  Theorem

      |- ‚àÄf0 f1 f2 f3 f4 f5 f6 f7 f8.
           ‚àÉfn.
             (fn tt = f0) ‚àß (fn ff = f1) ‚àß (‚àÄa. fn (propmm a) = f2 a) ‚àß
             (‚àÄa0 a1. fn (a0 andmm a1) = f3 a0 a1 (fn a0) (fn a1)) ‚àß
             (‚àÄa0 a1. fn (a0 ormm a1) = f4 a0 a1 (fn a0) (fn a1)) ‚àß
             (‚àÄa0 a1. fn (Box a0 a1) = f5 a0 a1 (fn a1)) ‚àß
             (‚àÄa0 a1. fn (Dia a0 a1) = f6 a0 a1 (fn a1)) ‚àß
             (‚àÄa0 a1. fn (nu a0 a1) = f7 a0 a1 (fn a1)) ‚àß
             ‚àÄa0 a1. fn (mu a0 a1) = f8 a0 a1 (fn a1)

   [mmForm_case_cong]  Theorem

      |- ‚àÄM M' v v1 f f1 f2 f3 f4 f5 f6.
           (M = M') ‚àß ((M' = tt) ‚áí (v = v')) ‚àß ((M' = ff) ‚áí (v1 = v1')) ‚àß
           (‚àÄa. (M' = propmm a) ‚áí (f a = f' a)) ‚àß
           (‚àÄa0 a1. (M' = a0 andmm a1) ‚áí (f1 a0 a1 = f1' a0 a1)) ‚àß
           (‚àÄa0 a1. (M' = a0 ormm a1) ‚áí (f2 a0 a1 = f2' a0 a1)) ‚àß
           (‚àÄa0 a1. (M' = Box a0 a1) ‚áí (f3 a0 a1 = f3' a0 a1)) ‚àß
           (‚àÄa0 a1. (M' = Dia a0 a1) ‚áí (f4 a0 a1 = f4' a0 a1)) ‚àß
           (‚àÄa0 a1. (M' = nu a0 a1) ‚áí (f5 a0 a1 = f5' a0 a1)) ‚àß
           (‚àÄa0 a1. (M' = mu a0 a1) ‚áí (f6 a0 a1 = f6' a0 a1)) ‚áí
           (mmForm_CASE M v v1 f f1 f2 f3 f4 f5 f6 =
            mmForm_CASE M' v' v1' f' f1' f2' f3' f4' f5' f6')

   [mmForm_distinct]  Theorem

      |- tt ‚â† ff ‚àß (‚àÄa. tt ‚â† propmm a) ‚àß (‚àÄa1 a0. tt ‚â† a0 andmm a1) ‚àß
         (‚àÄa1 a0. tt ‚â† a0 ormm a1) ‚àß (‚àÄa1 a0. tt ‚â† Box a0 a1) ‚àß
         (‚àÄa1 a0. tt ‚â† Dia a0 a1) ‚àß (‚àÄa1 a0. tt ‚â† nu a0 a1) ‚àß
         (‚àÄa1 a0. tt ‚â† mu a0 a1) ‚àß (‚àÄa. ff ‚â† propmm a) ‚àß
         (‚àÄa1 a0. ff ‚â† a0 andmm a1) ‚àß (‚àÄa1 a0. ff ‚â† a0 ormm a1) ‚àß
         (‚àÄa1 a0. ff ‚â† Box a0 a1) ‚àß (‚àÄa1 a0. ff ‚â† Dia a0 a1) ‚àß
         (‚àÄa1 a0. ff ‚â† nu a0 a1) ‚àß (‚àÄa1 a0. ff ‚â† mu a0 a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† a0 andmm a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† a0 ormm a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† Box a0 a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† Dia a0 a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† nu a0 a1) ‚àß
         (‚àÄa1 a0 a. propmm a ‚â† mu a0 a1) ‚àß
         (‚àÄa1' a1 a0' a0. a0 andmm a1 ‚â† a0' ormm a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 andmm a1 ‚â† Box a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 andmm a1 ‚â† Dia a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 andmm a1 ‚â† nu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 andmm a1 ‚â† mu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 ormm a1 ‚â† Box a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 ormm a1 ‚â† Dia a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 ormm a1 ‚â† nu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. a0 ormm a1 ‚â† mu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. Box a0 a1 ‚â† Dia a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. Box a0 a1 ‚â† nu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. Box a0 a1 ‚â† mu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. Dia a0 a1 ‚â† nu a0' a1') ‚àß
         (‚àÄa1' a1 a0' a0. Dia a0 a1 ‚â† mu a0' a1') ‚àß
         ‚àÄa1' a1 a0' a0. nu a0 a1 ‚â† mu a0' a1'

   [mmForm_induction]  Theorem

      |- ‚àÄP.
           P tt ‚àß P ff ‚àß (‚àÄp. P (propmm p)) ‚àß
           (‚àÄm m0. P m ‚àß P m0 ‚áí P (m andmm m0)) ‚àß
           (‚àÄm m0. P m ‚àß P m0 ‚áí P (m ormm m0)) ‚àß
           (‚àÄm. P m ‚áí ‚àÄf. P (Box f m)) ‚àß (‚àÄm. P m ‚áí ‚àÄf. P (Dia f m)) ‚àß
           (‚àÄm. P m ‚áí ‚àÄp. P (nu p m)) ‚àß (‚àÄm. P m ‚áí ‚àÄp. P (mu p m)) ‚áí
           ‚àÄm. P m

   [mmForm_nchotomy]  Theorem

      |- ‚àÄmm.
           (mm = tt) ‚à® (mm = ff) ‚à® (‚àÉp. mm = propmm p) ‚à®
           (‚àÉm m0. mm = m andmm m0) ‚à® (‚àÉm m0. mm = m ormm m0) ‚à®
           (‚àÉf m. mm = Box f m) ‚à® (‚àÉf m. mm = Dia f m) ‚à®
           (‚àÉp m. mm = nu p m) ‚à® ‚àÉp m. mm = mu p m

   [mmUpdate_MONOTONIC]  Theorem

      |- (‚àÄV Z E F. E ‚äÜ F ‚áí extends (mmUpdate Z V E) (mmUpdate Z V F)) ‚àß
         ‚àÄV V' Z E.
           extends V V' ‚áí extends (mmUpdate Z V E) (mmUpdate Z V' E)

   [mmfn_CLAUSES]  Theorem

      |- (‚àÄf1 f2 V Trans.
            mmfn Trans (f1 andmm f2) ùïå(:'configuration) V =
            mmfn Trans f1 ùïå(:'configuration) V ‚à©
            mmfn Trans f2 ùïå(:'configuration) V) ‚àß
         ‚àÄf1 f2 V Trans.
           mmfn Trans (f1 ormm f2) ùïå(:'configuration) V =
           mmfn Trans f1 ùïå(:'configuration) V ‚à™
           mmfn Trans f2 ùïå(:'configuration) V

   [mmfn_MONOTONIC]  Theorem

      |- ‚àÄform V V'.
           extends V V' ‚áí
           mmfn Trans form ùïå(:'configuration) V ‚äÜ
           mmfn Trans form ùïå(:'configuration) V'

   [mmfn_MONOTONIC_Box]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans (Box f form) ùïå(:'configuration) V ‚äÜ
         mmfn Trans (Box f form) ùïå(:'configuration) V'

   [mmfn_MONOTONIC_Dia]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans (Dia f form) ùïå(:'configuration) V ‚äÜ
         mmfn Trans (Dia f form) ùïå(:'configuration) V'

   [mmfn_MONOTONIC_andmm]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form' ùïå(:'configuration) V ‚äÜ
            mmfn Trans form' ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans form ùïå(:'configuration) V ‚à©
         mmfn Trans form' ùïå(:'configuration) V ‚äÜ
         mmfn Trans form ùïå(:'configuration) V' ‚à©
         mmfn Trans form' ùïå(:'configuration) V'

   [mmfn_MONOTONIC_mu]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans (mu p form) ùïå(:'configuration) V ‚äÜ
         mmfn Trans (mu p form) ùïå(:'configuration) V'

   [mmfn_MONOTONIC_nu]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans (nu p form) ùïå(:'configuration) V ‚äÜ
         mmfn Trans (nu p form) ùïå(:'configuration) V'

   [mmfn_MONOTONIC_ormm]  Theorem

      |- (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form ùïå(:'configuration) V ‚äÜ
            mmfn Trans form ùïå(:'configuration) V') ‚áí
         (‚àÄV V'.
            extends V V' ‚áí
            mmfn Trans form' ùïå(:'configuration) V ‚äÜ
            mmfn Trans form' ùïå(:'configuration) V') ‚áí
         extends V V' ‚áí
         mmfn Trans form ùïå(:'configuration) V ‚à™
         mmfn Trans form' ùïå(:'configuration) V ‚äÜ
         mmfn Trans form ùïå(:'configuration) V' ‚à™
         mmfn Trans form' ùïå(:'configuration) V'

   [mmfn_MONOTONIC_propvar]  Theorem

      |- ‚àÄZ V V'.
           extends V V' ‚áí
           mmfn Trans (propmm Z) ùïå(:'configuration) V ‚äÜ
           mmfn Trans (propmm Z) ùïå(:'configuration) V'

   [mmfn_tt_ff_CLAUSES]  Theorem

      |- (‚àÄTrans V V'.
            mmfn Trans tt ùïå(:'configuration) V ‚äÜ
            mmfn Trans tt ùïå(:'configuration) V') ‚àß
         ‚àÄTrans V V'.
           mmfn Trans ff ùïå(:'configuration) V ‚äÜ
           mmfn Trans ff ùïå(:'configuration) V'

   [mmsat_IN_CLAUSES]  Theorem

      |- (‚àÄs form V Trans.
            {s | (s,Trans,V) mmsat form} =
            {s | s ‚àà (Œªx. (x,Trans,V) mmsat form)}) ‚àß
         (‚àÄs f1 f2 V.
            {s | (s,Trans,V) mmsat f1 ‚àß (s,Trans,V) mmsat f2} =
            {s |
             s ‚àà (Œªx. (x,Trans,V) mmsat f1) ‚àß
             s ‚àà (Œªx. (x,Trans,V) mmsat f2)}) ‚àß
         ‚àÄs f1 f2 V.
           {s | (s,Trans,V) mmsat f1 ‚à® (s,Trans,V) mmsat f2} =
           {s |
            s ‚àà (Œªx. (x,Trans,V) mmsat f1) ‚à®
            s ‚àà (Œªx. (x,Trans,V) mmsat f2)}

   [mmsat_def]  Theorem

      |- (‚àÄV Trans E. (E,Trans,V) mmsat tt ‚áî T) ‚àß
         (‚àÄV Trans E. (E,Trans,V) mmsat ff ‚áî F) ‚àß
         (‚àÄZ V Trans E. (E,Trans,V) mmsat propmm Z ‚áî E ‚àà V Z) ‚àß
         (‚àÄf2 f1 V Trans E.
            (E,Trans,V) mmsat f1 andmm f2 ‚áî
            (E,Trans,V) mmsat f1 ‚àß (E,Trans,V) mmsat f2) ‚àß
         (‚àÄf2 f1 V Trans E.
            (E,Trans,V) mmsat f1 ormm f2 ‚áî
            (E,Trans,V) mmsat f1 ‚à® (E,Trans,V) mmsat f2) ‚àß
         (‚àÄf V Trans E Actions.
            (E,Trans,V) mmsat Box Actions f ‚áî
            ‚àÄE' a. Trans a E E' ‚áí a ‚àà Actions ‚áí (E',Trans,V) mmsat f) ‚àß
         (‚àÄf V Trans E Actions.
            (E,Trans,V) mmsat Dia Actions f ‚áî
            ‚àÉE' a. Trans a E E' ‚àß a ‚àà Actions ‚àß (E',Trans,V) mmsat f) ‚àß
         (‚àÄf Z V Trans E.
            (E,Trans,V) mmsat nu Z f ‚áî
            ‚àÉsetE.
              E ‚àà setE ‚àß
              ‚àÄE'. E' ‚àà setE ‚áí (E',Trans,mmUpdate Z V setE) mmsat f) ‚àß
         ‚àÄf Z V Trans E.
           (E,Trans,V) mmsat mu Z f ‚áî
           ‚àÄsetE.
             E ‚àâ setE ‚áí
             ‚àÉE'. (E',Trans,mmUpdate Z V setE) mmsat f ‚àß E' ‚àâ setE

   [mmsat_ind]  Theorem

      |- ‚àÄP.
           (‚àÄE Trans V. P (E,Trans,V) tt) ‚àß
           (‚àÄE Trans V. P (E,Trans,V) ff) ‚àß
           (‚àÄE Trans V Z. P (E,Trans,V) (propmm Z)) ‚àß
           (‚àÄE Trans V f1 f2.
              P (E,Trans,V) f1 ‚àß P (E,Trans,V) f2 ‚áí
              P (E,Trans,V) (f1 andmm f2)) ‚àß
           (‚àÄE Trans V f1 f2.
              P (E,Trans,V) f1 ‚àß P (E,Trans,V) f2 ‚áí
              P (E,Trans,V) (f1 ormm f2)) ‚àß
           (‚àÄE Trans V Actions f.
              (‚àÄa E'. Trans a E E' ‚àß a ‚àà Actions ‚áí P (E',Trans,V) f) ‚áí
              P (E,Trans,V) (Box Actions f)) ‚àß
           (‚àÄE Trans V Actions f.
              (‚àÄE'. P (E',Trans,V) f) ‚áí P (E,Trans,V) (Dia Actions f)) ‚àß
           (‚àÄE Trans V Z f.
              (‚àÄE' setE. E' ‚àà setE ‚áí P (E',Trans,mmUpdate Z V setE) f) ‚áí
              P (E,Trans,V) (nu Z f)) ‚àß
           (‚àÄE Trans V Z f.
              (‚àÄsetE E'. E ‚àâ setE ‚áí P (E',Trans,mmUpdate Z V setE) f) ‚áí
              P (E,Trans,V) (mu Z f)) ‚áí
           ‚àÄv v1 v2 v3. P (v,v1,v2) v3

   [mmsat_mu_lfp]  Theorem

      |- ‚àÄf Z V Trans E.
           (E,Trans,V) mmsat mu Z f ‚áî E ‚àà lfp (satFun Trans Z V f)

   [mmsat_nu_gfp]  Theorem

      |- ‚àÄf Z V Trans E.
           (E,Trans,V) mmsat nu Z f ‚áî E ‚àà gfp (satFun Trans Z V f)

   [satFun_MONOTONIC]  Theorem

      |- ‚àÄV Trans Z form E1 E2.
           E1 ‚äÜ E2 ‚áí satFun Trans Z V form E1 ‚äÜ satFun Trans Z V form E2

   [satFun_gfp_thm]  Theorem

      |- gfp (satFun Trans Z V f) =
         BIGUNION {setE | setE ‚äÜ satFun Trans Z V f setE}

   [satFun_lfp_thm]  Theorem

      |- lfp (satFun Trans Z V f) =
         BIGINTER {setE | satFun Trans Z V f setE ‚äÜ setE}


*)
end
